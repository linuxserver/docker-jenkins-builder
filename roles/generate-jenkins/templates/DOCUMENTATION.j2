---
title: {{ project_name }}
---
<!-- DO NOT EDIT THIS FILE MANUALLY  -->
<!-- Please read the {{ project_github_asset }}/.github/CONTRIBUTING.md -->

{% if project_deprecation_status %}
# DEPRECATION NOTICE

This image is deprecated. We will not offer support for this image and it will not be updated.
{% if project_deprecation_message is defined %}{{ project_deprecation_message }}{% endif %}

{% endif %}
# [{{ lsio_project_name_short }}/{{ project_name }}]({{ project_github_repo_url }})

[![GitHub Stars]({{ lsio_shieldsio_github_stars }})]({{ project_github_repo_url }})
[![GitHub Release]({{ lsio_shieldsio_github_release }})]({{ project_github_repo_url }}/releases)
[![GitHub Package Repository]({{ lsio_shieldsio_static_github_package }})]({{ project_github_repo_url }}/packages)
[![GitLab Container Registry]({{ lsio_shieldsio_static_gitlab_registry }})]({{ lsio_gitlab_url }}/{{ project_repo_name }}/container_registry)
[![Docker Pulls]({{ lsio_shieldsio_docker_pulls }})]({{ lsio_docker_hub_url }}/{{ project_name }})
[![Docker Stars]({{ lsio_shieldsio_docker_stars }})]({{ lsio_docker_hub_url }}/{{ project_name }})
[![Jenkins Build]({{ lsio_shieldsio_jenkins_build }})]({{ lsio_ci_url }}/job/Docker-Pipeline-Builders/job/{{ project_repo_name }}/job/{{ ls_branch }}/)
{% for var in repo_vars %}
{% if 'CI' in var and 'TRUE' in var.upper() and '_' not in var %}
[![LSIO CI]({{ lsio_shieldsio_dynamic_ci }})]({{ lsio_object_url }}/{{ lsio_project_name_short }}/{{ project_name }}/latest/index.html)
{% endif %}
{% endfor %}

{{ project_blurb | trim }}
{% if project_blurb_optional_extras_enabled %}

{% for item in project_blurb_optional_extras %}
* {{ item }}
{% endfor %}
{% endif %}

## Supported Architectures

{{ "Our images support multiple architectures such as `x86-64`, `arm64` and `armhf`. " if available_architectures | length > 1  else "" }}We utilise the docker manifest for multi-platform awareness. More information is available from docker [here](https://github.com/docker/distribution/blob/master/docs/spec/manifest-v2-2.md#manifest-list) and our announcement [here]({{ lsio_blog_url }}/2019/02/21/the-lsio-pipeline-project/).

Simply pulling `ghcr.io/{{ lsio_project_name_short }}/{{ project_name }}` should retrieve the correct image for your arch, but you can also pull specific arch images via tags.

The architectures supported by this image are:

| Architecture | Tag |
| :----: | --- |
{% for item in available_architectures %}
| {{ item.arch }} | {{ item.tag }} |
{% endfor %}
{% if development_versions %}

## Version Tags

This image provides various versions that are available via tags. `latest` tag usually provides the latest stable version. Others are considered under development and caution must be exercised when using them.

| Tag | Description |
| :----: | --- |
{% for item in development_versions_items %}
| {{ item.tag }} | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if app_setup_block_enabled %}

## Application Setup

{{ app_setup_block | trim }}
{% endif %}

## Usage

To help you get started creating a container from this image you can either use docker-compose or the docker cli.

### docker-compose

This is the recommended option. More information about docker-compose can be found in our documentation [here]({{ lsio_docs_url }}/general/docker-compose).

Compatible with docker-compose v2 schemas.

```yaml
{% if not custom_compose is defined %}---
version: "2.1"
services:
  {{ project_name }}:
    image: ghcr.io/{{ lsio_project_name_short }}/{{ project_name }}
    container_name: {{ project_name }}
{% if param_usage_include_hostname is sameas true %}
    hostname: {{ param_hostname }}
{% elif param_usage_include_hostname == 'optional' %}
    hostname: {{ param_hostname }} #optional
{% endif %}
{% if privileged is sameas true %}
    privileged: true
{% elif privileged == 'optional' %}
    privileged: true #optional
{% endif %}
{% if cap_add_param or opt_cap_add_param %}
    cap_add:
{% endif %}
{% if cap_add_param %}
{% for item in cap_add_param_vars %}
      - {{ item.cap_add_var }}
{% endfor %}
{% endif %}
{% if opt_cap_add_param %}
{% for item in opt_cap_add_param_vars %}
      - {{ item.cap_add_var }} #optional
{% endfor %}
{% endif %}
{% if param_usage_include_net is sameas true %}
    network_mode: {{ param_net }}
{% elif param_usage_include_net == 'optional' %}
    network_mode: {{ param_net }} #optional
{% endif %}
{% if common_param_env_vars_enabled or param_usage_include_env or opt_param_usage_include_env %}
    environment:
{% endif %}
{% if common_param_env_vars_enabled is sameas true %}
{% for item in common_param_env_vars %}
      - {{ item.env_var }}={{ item.env_value }}
{% endfor %}
{% elif common_param_env_vars_enabled == 'optional' %}
{% for item in common_param_env_vars %}
      - {{ item.env_var }}={{ item.env_value }} #optional
{% endfor %}
{% endif %}
{% if param_usage_include_env %}
{% for item in param_env_vars %}
      - {{ item.env_var }}={{ item.env_value }}
{% endfor %}
{% endif %}
{% if opt_param_usage_include_env %}
{% for item in opt_param_env_vars %}
      - {{ item.env_var }}={{ item.env_value }} #optional
{% endfor %}
{% endif %}
{% if param_usage_include_vols or opt_param_usage_include_vols %}
    volumes:
{% endif %}
{% if param_usage_include_vols %}
{% for item in param_volumes %}
      - {{ item.vol_host_path }}:{{ item.vol_path }}
{% endfor %}
{% endif %}
{% if opt_param_usage_include_vols %}
{% for item in opt_param_volumes %}
      - {{ item.vol_host_path }}:{{ item.vol_path }} #optional
{% endfor %}
{% endif %}
{% if param_usage_include_ports or opt_param_usage_include_ports %}
    ports:
{% endif %}
{% if param_usage_include_ports %}
{% for item in param_ports %}
      - {{ item.external_port }}:{{ item.internal_port }}
{% endfor %}
{% endif %}
{% if opt_param_usage_include_ports %}
{% for item in opt_param_ports %}
      - {{ item.external_port }}:{{ item.internal_port }} #optional
{% endfor %}
{% endif %}
{% if param_device_map or opt_param_device_map %}
    devices:
{% endif %}
{% if param_device_map %}
{% for item in param_devices %}
      - {{ item.device_host_path }}:{{ item.device_path }}
{% endfor %}
{% endif %}
{% if opt_param_device_map %}
{% for item in opt_param_devices %}
      - {{ item.device_host_path }}:{{ item.device_path }} #optional
{% endfor %}
{% endif %}
{% if custom_params is defined %}
{% for item in custom_params %}
{% if item.array is not defined %}
    {{ item.name_compose }}: "{{ item.value }}"
{% else %}
    {{ item.name_compose }}:
{% for item2 in item.value %}
      - {{ item2 }}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% if opt_custom_params is defined %}
{% for item in opt_custom_params %}
{% if item.array is not defined %}
    {{ item.name_compose }}: "{{ item.value }}" #optional
{% else %}
    {{ item.name_compose }}: #optional
{% for item2 in item.value %}
      - {{ item2 }} #optional
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
    restart: unless-stopped{% else %}{{ custom_compose }}{% endif %}

```

### docker cli

More information about the docker cli is available from docker [here](https://docs.docker.com/engine/reference/commandline/cli/).

```bash
docker run -d \
  --name={{ param_container_name }} \
{% if param_usage_include_hostname is sameas true %}
  --hostname={{ param_hostname }} \
{% elif param_usage_include_hostname == 'optional' %}
  --hostname={{ param_hostname }} `#optional` \
{% endif %}
{% if param_usage_include_net is sameas true %}
  --net={{ param_net }} \
{% elif param_usage_include_net == 'optional' %}
  --net={{ param_net }} `#optional` \
{% endif %}
{% if privileged is sameas true %}
  --privileged \
{% elif privileged == 'optional' %}
  --privileged `#optional` \
{% endif %}
{% if cap_add_param %}
{% for item in cap_add_param_vars %}
  --cap-add={{ item.cap_add_var }} \
{% endfor %}
{% endif %}
{% if opt_cap_add_param %}
{% for item in opt_cap_add_param_vars %}
  --cap-add={{ item.cap_add_var }} `#optional` \
{% endfor %}
{% endif %}
{% if common_param_env_vars_enabled is sameas true %}
{% for item in common_param_env_vars %}
  -e {{ item.env_var }}={{ item.env_value }} \
{% endfor %}
{% elif common_param_env_vars_enabled == 'optional' %}
{% for item in common_param_env_vars %}
  -e {{ item.env_var }}={{ item.env_value }} `#optional` \
{% endfor %}
{% endif %}
{% if param_usage_include_env %}
{% for item in param_env_vars %}
  -e {{ item.env_var }}={{ item.env_value }} \
{% endfor %}
{% endif %}
{% if opt_param_usage_include_env %}
{% for item in opt_param_env_vars %}
  -e {{ item.env_var }}={{ item.env_value }} `#optional` \
{% endfor %}
{% endif %}
{% if param_usage_include_ports %}
{% for item in param_ports %}
  -p {{ item.external_port }}:{{ item.internal_port }} \
{% endfor %}
{% endif %}
{% if opt_param_usage_include_ports %}
{% for item in opt_param_ports %}
  -p {{ item.external_port }}:{{ item.internal_port }} `#optional` \
{% endfor %}
{% endif %}
{% if param_usage_include_vols %}
{% for item in param_volumes %}
  -v {{ item.vol_host_path }}:{{ item.vol_path }} \
{% endfor %}
{% endif %}
{% if opt_param_usage_include_vols %}
{% for item in opt_param_volumes %}
  -v {{ item.vol_host_path }}:{{ item.vol_path }} `#optional` \
{% endfor %}
{% endif %}
{% if param_device_map %}
{% for item in param_devices %}
  --device {{ item.device_host_path }}:{{ item.device_path }} \
{% endfor %}
{% endif %}
{% if opt_param_device_map %}
{% for item in opt_param_devices %}
  --device {{ item.device_host_path }}:{{ item.device_path }} `#optional` \
{% endfor %}
{% endif %}
{% if custom_params is defined %}
{% for item in custom_params %}
{% if item.array is not defined %}
  --{{ item.name }}="{{ item.value }}" \
{% else %}
{% for item2 in item.value %}
  --{{ item.name }}="{{ item2 }}" \
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% if opt_custom_params is defined %}
{% for item in opt_custom_params %}
{% if item.array is not defined %}
  --{{ item.name }}="{{ item.value }}" `#optional` \
{% else %}
{% for item2 in item.value %}
  --{{ item.name }}="{{ item2 }}" `#optional` \
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
  --restart unless-stopped \
  ghcr.io/{{ lsio_project_name_short }}/{{ project_name }}
```

{% if optional_block_1 %}
{% for item in optional_block_1_items %}
{{ item }}
{% endfor %}
{% endif %}
## Parameters

Docker images are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate `<external>:<internal>` respectively. For example, `-p 8080:80` would expose port `80` from inside the container to be accessible from the host's IP on port `8080` outside the container.

### Ports (`-p`)

| Parameter | Function |
| :----: | --- |
{% if param_usage_include_ports %}
{% for item in param_ports %}
| `{{ item.internal_port }}` | {{ item.port_desc }} |
{% endfor %}
{% endif %}
{% if opt_param_usage_include_ports %}
{% for item in opt_param_ports %}
| `{{ item.internal_port }}` | {{ item.port_desc }} |
{% endfor %}
{% endif %}
{% if param_usage_include_net %}

#### Networking (`--net`)

| Parameter | Function |
| :-----:   | --- |
| `--net={{ param_net }}` | {{ param_net_desc }} |
{% endif %}

### Environment Variables (`-e`)

| Env | Function |
| :----: | --- |
{% if common_param_env_vars_enabled %}
{% for item in common_param_env_vars %}
| `{{ item.env_var }}={{ item.env_value }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if param_usage_include_env %}
{% for item in param_env_vars %}
| `{{ item.env_var }}={{ item.env_value }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_param_usage_include_env %}
{% for item in opt_param_env_vars %}
| `{{ item.env_var }}={{ item.env_value }}` | {{ item.desc }} |
{% endfor %}
{% endif %}

### Volume Mappings (`-v`)

| Volume | Function |
| :----: | --- |
{% if param_usage_include_vols %}
{% for item in param_volumes %}
| `{{ item.vol_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_param_usage_include_vols %}
{% for item in opt_param_volumes %}
| `{{ item.vol_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if param_device_map or opt_param_device_map %}

### Device Mappings (`--device`)

| Parameter | Function |
| :-----:   | --- |
{% if param_device_map %}
{% for item in param_devices %}
| `{{ item.device_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_param_device_map %}
{% for item in opt_param_devices %}
| `{{ item.device_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% endif %}
{% if custom_params is defined or opt_custom_params is defined or param_usage_include_hostname %}

#### Miscellaneous Options

| Parameter | Function |
| :-----:   | --- |
{% if param_usage_include_hostname %}
| `--hostname=` | {{ param_hostname_desc }} |
{% endif %}
{% if custom_params is defined %}
{% for item in custom_params %}
| `--{{ item.name }}=` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_custom_params is defined %}
{% for item in opt_custom_params %}
| `--{{ item.name }}=` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% endif %}

## Environment variables from files (Docker secrets)

You can set any environment variable from a file by using a special prepend `FILE__`.

As an example:

```bash
-e FILE__PASSWORD=/run/secrets/mysecretpassword
```

Will set the environment variable `PASSWORD` based on the contents of the `/run/secrets/mysecretpassword` file.

## Umask for running applications

For all of our images we provide the ability to override the default umask settings for services started within the containers using the optional `-e UMASK=022` setting.
Keep in mind umask is not chmod it subtracts from permissions based on it's value it does not add. Please read up [here](https://en.wikipedia.org/wiki/Umask) before asking for support.
{% if optional_parameters is defined %}

## Optional Parameters

{{ optional_parameters | trim }}
{% endif %}
{% if common_param_env_vars_enabled %}

## User / Group Identifiers

When using volumes (`-v` flags), permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user `PUID` and group `PGID`.

Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.

In this instance `PUID=1000` and `PGID=1000`, to find yours use `id user` as below:

```bash
  $ id username
    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)
```
{% endif %}

## Docker Mods

[![Docker Mods]({{ lsio_shieldsio_dynamic_mods }})]({{ lsio_mods_url }} "{{ lsio_mods_desc }}") [![Docker Universal Mods]({{ lsio_shieldsio_dynamic_universal_mods }})]({{ lsio_universal_mods_url }} "{{ lsio_universal_mods_desc }}")

We publish various [Docker Mods]({{ lsio_github_url }}/docker-mods) to enable additional functionality within the containers. The list of Mods available for this image (if any) as well as universal mods that can be applied to any one of our images can be accessed via the dynamic badges above.
{% if nginx_reverse_proxy_snippet_enabled %}

## Reverse Proxy Snippet

This snippet has been tested with {{ lsio_project_name|capitalize}}'s [Secure Web Application Gateway]({{ lsio_github_url }}/docker-swag) container.
{{ nginx_reverse_proxy_block }}
{% endif %}

## Support Info

* Shell access whilst the container is running:
  * `docker exec -it {{ project_name }} /bin/bash`
* To monitor the logs of the container in realtime:
  * `docker logs -f {{ project_name }}`
* Container version number
  * `docker inspect -f {% raw %}'{{ index .Config.Labels "build_version" }}'{% endraw %} {{ project_name }}`
* Image version number
  * `docker inspect -f {% raw %}'{{ index .Config.Labels "build_version" }}'{% endraw %} ghcr.io/{{ lsio_project_name_short }}/{{ project_name }}`

## Versions

{% for item in changelogs %}
* **{{ item.date }}** - {{ item.desc }}
{% endfor %}
