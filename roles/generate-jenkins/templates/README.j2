#jinja2: keep_trailing_newline:True
{%- set markdown="gfm" -%}
{% from 'common_macros.j2' import noter with context %}
{%- set has_latest= true if (development_versions == true and 'latest' in (development_versions_items | map(attribute="tag"))) or (development_versions == false) else false -%}
{% include "README_SNIPPETS/DO_NOT_EDIT.j2" | trim %}
{% include "README_SNIPPETS/GROUP_INFO.j2" | trim %}

{% if project_deprecation_status %}
{% include "README_SNIPPETS/DEPRECATION.j2" | trim %}

{% endif %}
# [{{ lsio_project_name_short }}/{{ project_name }}]({{ project_github_repo_url }})

{% include "README_SNIPPETS/PROJECT_BADGES.j2" | trim %}

{{ noter(project_blurb) | trim }}
{% if project_blurb_optional_extras_enabled %}

{% for item in project_blurb_optional_extras %}
* {{ item }}
{% endfor %}
{% endif %}

[![{{ project_name }}]({{ project_logo }})]({{ project_url }})

{% include "README_SNIPPETS/SUPPORTED_ARCHITECTURES.j2" | trim %}

{% if development_versions %}
{% include "README_SNIPPETS/VERSION_TAGS.j2" | trim %}

{% endif %}
{% if app_setup_block_enabled %}
{% include "README_SNIPPETS/APPLICATION_SETUP.j2" | trim %}

{% if kasm_blurb is defined %}
{% include "README_SNIPPETS/KASM.j2" | trim %}

{% endif %} 
{% if readonly_supported is defined and readonly_supported %}
{% include "README_SNIPPETS/READONLY.j2" | trim %}

{% endif %}
{% if ["CI_SSL='true'", "CI_SSL= 'true'" ,"CI_SSL = 'true'"]|select("in", repo_vars) %}
{% include "README_SNIPPETS/STRICT_PROXY.j2" | trim %}

{% endif %}
{% if readme_seccomp is defined and readme_seccomp %}
{% include "README_SNIPPETS/SECCOMP.j2" | trim %}

{% endif %}
{% if readme_keyboard is defined and readme_keyboard %}
{% include "README_SNIPPETS/KEYBOARD.j2" | trim %}

{% endif %}
{% if readme_hwaccel is defined and readme_hwaccel %}
{% include "README_SNIPPETS/HWACCEL.j2" | trim %}

{% endif %}
{% if readme_media is defined and readme_media %}
{% include "README_SNIPPETS/MEDIA.j2" | trim %}

{% endif %}
{% endif %}
{% include "README_SNIPPETS/USAGE.j2" | trim %}

## Parameters

Containers are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate `<external>:<internal>` respectively. For example, `-p 8080:80` would expose port `80` from inside the container to be accessible from the host's IP on port `8080` outside the container.

| Parameter | Function |
| :----: | --- |
{% if param_usage_include_hostname %}
| `--hostname=` | {{ param_hostname_desc }} |
{% endif %}
{% if param_usage_include_mac_address %}
| `--mac-address=` | {{ param_mac_address_desc }} |
{% endif %}
{% if param_usage_include_net %}
| `--net={{ param_net }}` | {{ param_net_desc }} |
{% endif %}
{% if param_usage_include_ports %}
{% for item in param_ports %}
| `-p {{ item.internal_port }}` | {{ item.port_desc }} |
{% endfor %}
{% endif %}
{% if opt_param_usage_include_ports %}
{% for item in opt_param_ports %}
| `-p {{ item.internal_port }}` | {{ item.port_desc }} |
{% endfor %}
{% endif %}
{% if common_param_env_vars_enabled %}
{% for item in common_param_env_vars %}
| `-e {{ item.env_var }}={{ item.env_value }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if param_usage_include_env %}
{% for item in param_env_vars if not item.env_var | lower is eq "tz" %}
| `-e {{ item.env_var }}={{ item.env_value }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_param_usage_include_env %}
{% for item in opt_param_env_vars %}
| `-e {{ item.env_var }}={{ item.env_value }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if param_usage_include_vols %}
{% for item in param_volumes %}
| `-v {{ item.vol_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_param_usage_include_vols %}
{% for item in opt_param_volumes %}
| `-v {{ item.vol_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if param_device_map %}
{% for item in param_devices %}
| `--device {{ item.device_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_param_device_map %}
{% for item in opt_param_devices %}
| `--device {{ item.device_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if custom_params is defined %}
{% for item in custom_params %}
| `--{{ item.name }}=` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_custom_params is defined %}
{% for item in opt_custom_params %}
| `--{{ item.name }}=` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if security_opt_param %}
{% for item in security_opt_param_vars %}
| `--security-opt {{ item.run_var }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_security_opt_param %}
{% for item in opt_security_opt_param_vars %}
| `--security-opt {{ item.run_var }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if readonly_supported is defined and readonly_supported %}
| `--read-only=true` | Run container with a read-only filesystem. Please [read the docs](https://docs.linuxserver.io/misc/read-only/). |
{% endif %}
{% if cap_add_param or opt_cap_add_param or (custom_params is defined and 'sysctl' in (custom_params | map(attribute="name")) ) %}

### Portainer notice

This image utilises `cap_add` or `sysctl` to work properly. This is not implemented properly in some versions of Portainer, thus this image may not work if deployed through Portainer.
{% endif %}

{% include "README_SNIPPETS/ENV_VAR_FILES.j2" | trim %}

{% include "README_SNIPPETS/UMASK.j2" | trim %}

{% if optional_parameters is defined %}
{% include "README_SNIPPETS/OPTIONAL_PARAMETERS.j2" | trim %}

{% endif %}
{% if common_param_env_vars_enabled %}
{% include "README_SNIPPETS/USER_GROUP_IDENTIFIERS.j2" | trim %}

{% endif %}
{% include "README_SNIPPETS/DOCKER_MODS.j2" | trim %}

{% include "README_SNIPPETS/SUPPORT_INFO.j2" | trim %}

{% include "README_SNIPPETS/UPDATING_INFO.j2" | trim %}

{% include "README_SNIPPETS/BUILDING_LOCALLY.j2" | trim %}

{% include "README_SNIPPETS/VERSIONS.j2" | trim %}
