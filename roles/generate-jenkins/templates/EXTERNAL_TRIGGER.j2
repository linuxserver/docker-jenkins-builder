name: External Trigger Main

on:
  workflow_dispatch:

jobs:
  external-trigger-{{ ls_branch }}:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.3

      - name: External Trigger
        if: github.ref == 'refs/heads/{{ ls_branch }}'
        run: |
          if [ -n "${{ '{{' }} secrets.PAUSE_EXTERNAL_TRIGGER_{{ project_name|regex_replace('-','_')|upper }}_{{ ls_branch|regex_replace('-','_')|upper }} {{ '}}' }}" ]; then
            echo "Github secret PAUSE_EXTERNAL_TRIGGER_{{ project_name|regex_replace('-','_')|upper }}_{{ ls_branch|regex_replace('-','_')|upper }} is set; skipping trigger."
            exit 0
          fi
          echo "External trigger running off of {{ ls_branch }} branch. To disable this trigger, set a Github secret named \"PAUSE_EXTERNAL_TRIGGER_{{ project_name|regex_replace('-','_')|upper }}_{{ ls_branch|regex_replace('-','_')|upper }}\"."
          echo "Setting env vars"
{% for repo_var in repo_vars %}
          {{ repo_var|regex_replace('\s(?==)','')|regex_replace('(?<==)\s','') }}
{% endfor %}
          echo "Retrieving external version"
{% if custom_version_command is defined %}
          EXT_RELEASE=$({{ custom_version_command }})
{% endif %}
{% if external_type == "github_devel" %}
          EXT_RELEASE=$(curl -u "${{ '{{' }} secrets.CR_USER {{ '}}' }}:${{ '{{' }} secrets.CR_PAT {{ '}}' }}" -sX GET "https://api.github.com/repos/${EXT_USER}/${EXT_REPO}/releases" | jq -r '.[0] | .tag_name')
{% elif external_type == "github_stable" %}
          EXT_RELEASE=$(curl -u "${{ '{{' }} secrets.CR_USER {{ '}}' }}:${{ '{{' }} secrets.CR_PAT {{ '}}' }}" -sX GET "https://api.github.com/repos/${EXT_USER}/${EXT_REPO}/releases/latest" | jq -r '. | .tag_name')
{% elif external_type == "alpine_repo" %}
          EXT_RELEASE=$(docker run --rm alpine:${DIST_TAG} sh -c 'apk update --quiet --repository '"${DIST_REPO}"'\
            && apk info --repository '"${DIST_REPO}"' '"${DIST_REPO_PACKAGES}"' | md5sum | cut -c1-8')
{% elif external_type == "custom_json" %}
          if [[ "${JSON_URL}" == *"api.github.com"* ]]; then
            EXT_RELEASE=$(curl -u "${{ '{{' }} secrets.CR_USER {{ '}}' }}:${{ '{{' }} secrets.CR_PAT {{ '}}' }}" -sX GET "${JSON_URL}" | jq -r ". | ${JSON_PATH}")
          else
            EXT_RELEASE=$(curl -s "${JSON_URL}" | jq -r ". | ${JSON_PATH}")
          fi
{% elif external_type == "deb_repo" %}
          EXT_RELEASE=$(docker run --rm "${DIST_IMAGE}":"${DIST_TAG}" bash -c \
            'echo -e "'"${DIST_REPO}"'" > /etc/apt/sources.list.d/check.list \
            && apt-get --allow-unauthenticated update -qq >/dev/null 2>&1\
            && apt-cache --no-all-versions show '"${DIST_REPO_PACKAGES}"' | md5sum | cut -c1-8')
{% elif external_type == "external_blob" %}
          EXT_RELEASE=$(#! /bin/bash
            if [ $(curl -I -sL -w "%{http_code}" "${EXT_BLOB}" -o /dev/null) == 200 ]; then
              curl -s -L "${EXT_BLOB}" | md5sum | cut -c1-8
            else
              exit 1
            fi)
{% elif external_type == "github_commit" %}
          EXT_RELEASE=$(curl -u "${{ '{{' }} secrets.CR_USER {{ '}}' }}:${{ '{{' }} secrets.CR_PAT {{ '}}' }}" -sX GET "https://api.github.com/repos/${EXT_USER}/${EXT_REPO}/commits/${EXT_GIT_BRANCH}" | jq -r '. | .sha' | cut -c1-8)
{% elif external_type == "gitlab_commit" %}
          EXT_RELEASE=$(curl -s "https://gitlab.com/api/v4/projects/${EXT_GITLAB_ID}/repository/commits/${EXT_GIT_BRANCH}" | jq -r '. | .id' | cut -c1-8)
{% elif external_type == "npm_version" %}
          EXT_RELEASE=$(curl -sL "https://replicate.npmjs.com/registry/${EXT_NPM}" |jq -r '. | .["dist-tags"].latest')
{% elif external_type == "pip_version" %}
          EXT_RELEASE=$(curl -sL "https://pypi.python.org/pypi/${EXT_PIP}/json" |jq -r '. | .info.version')
{% elif external_type == "os" %}
          echo "No external release, exiting."
          exit 0
{% endif %}
{% if custom_version_command is defined or external_type != "os" %}
          if [ -z "${EXT_RELEASE}" ]; then
            echo "Can't retrieve external version, exiting"
            FAILURE_REASON="Can't retrieve external version for {{ project_name }} branch {{ ls_branch }}"
            curl -X POST -H "Content-Type: application/json" --data '{"avatar_url": "https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png","embeds": [{"color": 16711680,
              "description": "**Trigger Failed** \n**Reason:** '"${FAILURE_REASON}"' \n"}],
              "username": "Github Actions"}' ${{ '{{' }} secrets.DISCORD_WEBHOOK {{ '}}' }}
            exit 1
          fi
          echo "External version: ${EXT_RELEASE}"
          echo "Retrieving last pushed version"
          image="${LS_USER}/{{ project_name }}"
          tag="{{ release_tag }}"
          token=$(curl -sX GET \
            "https://ghcr.io/token?scope=repository%3A${LS_USER}%2F{{ project_name }}%3Apull" \
            | jq -r '.token')
          if [ "${MULTIARCH}" == "true" ]; then
            multidigest=$(curl -s \
              --header "Accept: application/vnd.docker.distribution.manifest.v2+json" \
              --header "Authorization: Bearer ${token}" \
              "https://ghcr.io/v2/${image}/manifests/${tag}" \
              | jq -r 'first(.manifests[].digest)')
            digest=$(curl -s \
              --header "Accept: application/vnd.docker.distribution.manifest.v2+json" \
              --header "Authorization: Bearer ${token}" \
              "https://ghcr.io/v2/${image}/manifests/${multidigest}" \
              | jq -r '.config.digest')
          else
            digest=$(curl -s \
              --header "Accept: application/vnd.docker.distribution.manifest.v2+json" \
              --header "Authorization: Bearer ${token}" \
              "https://ghcr.io/v2/${image}/manifests/${tag}" \
              | jq -r '.config.digest')
          fi
          image_info=$(curl -sL \
            --header "Authorization: Bearer ${token}" \
            "https://ghcr.io/v2/${image}/blobs/${digest}" \
            | jq -r '.container_config')
          IMAGE_RELEASE=$(echo ${image_info} | jq -r '.Labels.build_version' | awk '{print $3}')
          IMAGE_VERSION=$(echo ${IMAGE_RELEASE} | awk -F'-ls' '{print $1}')
          if [ -z "${IMAGE_VERSION}" ]; then
            echo "Can't retrieve last pushed version, exiting"
            FAILURE_REASON="Can't retrieve last pushed version for {{ project_name }} tag {{ release_tag }}"
            curl -X POST -H "Content-Type: application/json" --data '{"avatar_url": "https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png","embeds": [{"color": 16711680,
              "description": "**Trigger Failed** \n**Reason:** '"${FAILURE_REASON}"' \n"}],
              "username": "Github Actions"}' ${{ '{{' }} secrets.DISCORD_WEBHOOK {{ '}}' }}
            exit 1
          fi
          echo "Last pushed version: ${IMAGE_VERSION}"
          if [ "${EXT_RELEASE}" == "${IMAGE_VERSION}" ]; then
            echo "Version ${EXT_RELEASE} already pushed, exiting"
            exit 0
          else
            echo "New version ${EXT_RELEASE} found; old version was ${IMAGE_VERSION}. Triggering new build"
            curl -X POST \
              https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-{{ project_name }}/job/{{ ls_branch }}/buildWithParameters?PACKAGE_CHECK=false \
              --user ${{ '{{' }} secrets.JENKINS_USER {{ '}}' }}:${{ '{{' }} secrets.JENKINS_TOKEN {{ '}}' }}
            echo "Notifying Discord"
            TRIGGER_REASON="A version change was detected for {{ project_name }} tag {{ release_tag }}. Old version:${IMAGE_VERSION} New version:${EXT_RELEASE}"
            curl -X POST -H "Content-Type: application/json" --data '{"avatar_url": "https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png","embeds": [{"color": 9802903,
              "description": "**Build Triggered** \n**Reason:** '"${TRIGGER_REASON}"' \n"}],
              "username": "Github Actions"}' ${{ '{{' }} secrets.DISCORD_WEBHOOK {{ '}}' }}
          fi
{% endif %}
