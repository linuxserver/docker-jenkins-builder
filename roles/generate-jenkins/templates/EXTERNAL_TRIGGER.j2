{#- Create a real object from repo_vars -#}
{%- set better_vars={} -%}
{%- for i in repo_vars -%}
{%- set i=(i | replace(' = ', '=', 1) | replace('=', '¯\_(ツ)_/¯', 1) | replace("'", "")).split('¯\_(ツ)_/¯') -%}
{%- set x=(better_vars.__setitem__(i[0], i[1])) -%}
{%- endfor -%}
{#- Create a real object from repo_vars -#}
name: External Trigger {{ ls_branch }}

on:
  workflow_dispatch:

jobs:
  external-trigger-{{ ls_branch|regex_replace('[^a-zA-Z0-9-]','-') }}:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.3

      - name: External Trigger
        if: github.ref == 'refs/heads/{{ ls_branch }}'
        run: |
{% if custom_version_command is defined or external_type != "os" %}
          if [ -n "${{ '{{' }} secrets.PAUSE_EXTERNAL_TRIGGER_{{ project_name|upper|regex_replace('[^A-Z0-9_]','_') }}_{{ ls_branch|upper|regex_replace('[^A-Z0-9_]','_') }} {{ '}}' }}" ]; then
            echo "**** Github secret PAUSE_EXTERNAL_TRIGGER_{{ project_name|upper|regex_replace('[^A-Z0-9_]','_') }}_{{ ls_branch|upper|regex_replace('[^A-Z0-9_]','_') }} is set; skipping trigger. ****"
            exit 0
          fi
          echo "**** External trigger running off of {{ ls_branch }} branch. To disable this trigger, set a Github secret named \"PAUSE_EXTERNAL_TRIGGER_{{ project_name|upper|regex_replace('[^A-Z0-9_]','_') }}_{{ ls_branch|upper|regex_replace('[^A-Z0-9_]','_') }}\". ****"
          echo "**** Retrieving external version ****"
{% endif %}
{% if custom_version_command is defined and 'api.github.com' in custom_version_command %}
          EXT_RELEASE=$({{ custom_version_command|replace('\\\\','\\')|replace('curl', 'curl -u ${{ secrets.CR_USER }}:${{ secrets.CR_PAT }}')  }})
{% elif custom_version_command is defined %}
          EXT_RELEASE=$({{ custom_version_command|replace('\\\\','\\')  }})
{% endif %}
{% if external_type == "github_devel" %}
          EXT_RELEASE=$(curl -u "${{ '{{' }} secrets.CR_USER {{ '}}' }}:${{ '{{' }} secrets.CR_PAT {{ '}}' }}" -sX GET "https://api.github.com/repos/{{ better_vars.EXT_USER }}/{{ better_vars.EXT_REPO }}/releases" | jq -r '.[0] | .tag_name')
{% elif external_type == "github_stable" %}
          EXT_RELEASE=$(curl -u "${{ '{{' }} secrets.CR_USER {{ '}}' }}:${{ '{{' }} secrets.CR_PAT {{ '}}' }}" -sX GET "https://api.github.com/repos/{{ better_vars.EXT_USER }}/{{ better_vars.EXT_REPO }}/releases/latest" | jq -r '. | .tag_name')
{% elif external_type == "alpine_repo" %}
          EXT_RELEASE=$(curl -sL "{{ better_vars.DIST_REPO }}x86_64/APKINDEX.tar.gz" | tar -xz -C /tmp \
            && awk '/^P:'"{{ better_vars.DIST_REPO_PACKAGES }}"'$/,/V:/' /tmp/APKINDEX | sed -n 2p | sed 's/^V://')
{% elif external_type == "custom_json" %}
{% if 'api.github.com' in better_vars.JSON_URL  %}
          EXT_RELEASE=$(curl -u "${{ '{{' }} secrets.CR_USER {{ '}}' }}:${{ '{{' }} secrets.CR_PAT {{ '}}' }}" -sX GET "{{ better_vars.JSON_URL }}" | jq -r '. | {{ better_vars.JSON_PATH }}')
{% else %}
          EXT_RELEASE=$(curl -s "{{ better_vars.JSON_URL }}" | jq -r '. | {{ better_vars.JSON_PATH }}')
{% endif %}
{% elif external_type == "deb_repo" %}
          EXT_RELEASE=$(docker run --rm "{{ better_vars.DIST_IMAGE }}":"{{ better_vars.DIST_TAG }}" bash -c \
            'echo -e "'"{{ better_vars.DIST_REPO }}"'" > /etc/apt/sources.list.d/check.list \
            && apt-get --allow-unauthenticated update -qq >/dev/null 2>&1\
            && apt-cache --no-all-versions show '"{{ better_vars.DIST_REPO_PACKAGES }}"' | md5sum | cut -c1-8')
{% elif external_type == "external_blob" %}
          EXT_RELEASE=$(#! /bin/bash
            if [ $(curl -I -sL -w "%{http_code}" "{{ better_vars.EXT_BLOB }}" -o /dev/null) == 200 ]; then
              curl -s -L "{{ better_vars.EXT_BLOB }}" | md5sum | cut -c1-8
            else
              exit 1
            fi)
{% elif external_type == "github_commit" %}
          EXT_RELEASE=$(curl -u "${{ '{{' }} secrets.CR_USER {{ '}}' }}:${{ '{{' }} secrets.CR_PAT {{ '}}' }}" -sX GET "https://api.github.com/repos/{{ better_vars.EXT_USER }}/{{ better_vars.EXT_REPO }}/commits/{{ better_vars.EXT_GIT_BRANCH }}" | jq -r '. | .sha' | cut -c1-8)
{% elif external_type == "gitlab_commit" %}
          EXT_RELEASE=$(curl -s "https://gitlab.com/api/v4/projects/{{ better_vars.EXT_GITLAB_ID }}/repository/commits/{{ better_vars.EXT_GIT_BRANCH }}" | jq -r '. | .id' | cut -c1-8)
{% elif external_type == "npm_version" %}
          EXT_RELEASE=$(curl -sL "https://replicate.npmjs.com/registry/{{ better_vars.EXT_NPM }}" |jq -r '. | .["dist-tags"].latest')
{% elif external_type == "pip_version" %}
          EXT_RELEASE=$(curl -sL "https://pypi.python.org/pypi/{{ better_vars.EXT_PIP }}/json" |jq -r '. | .info.version')
{% elif external_type == "os" %}
          echo "**** No external release, exiting ****"
          exit 0
{% endif %}
{% if custom_version_command is defined or external_type != "os" %}
          if [ -z "${EXT_RELEASE}" ] || [ "${EXT_RELEASE}" == "null" ]; then
            echo "**** Can't retrieve external version, exiting ****"
            FAILURE_REASON="Can't retrieve external version for {{ project_name }} branch {{ ls_branch }}"
            GHA_TRIGGER_URL="{{ project_github_repo_url }}/actions/runs/${{ '{{' }} github.run_id {{ '}}' }}"
            curl -X POST -H "Content-Type: application/json" --data '{"avatar_url": "https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png","embeds": [{"color": 16711680,
              "description": "**Trigger Failed** \n**Reason:** '"${FAILURE_REASON}"' \n**Trigger URL:** '"${GHA_TRIGGER_URL}"' \n"}],
              "username": "Github Actions"}' ${{ '{{' }} secrets.DISCORD_WEBHOOK {{ '}}' }}
            exit 1
          fi
          EXT_RELEASE=$(echo ${EXT_RELEASE} | sed 's/[~,%@+;:/]//g')
          echo "**** External version: ${EXT_RELEASE} ****"
          echo "**** Retrieving last pushed version ****"
          image="{{ better_vars.LS_USER }}/{{ project_name }}"
          tag="{{ release_tag }}"
          token=$(curl -sX GET \
            "https://ghcr.io/token?scope=repository%3A{{ better_vars.LS_USER }}%2F{{ project_name }}%3Apull" \
            | jq -r '.token')
{% if better_vars.MULTIARCH == 'true' %}
            multidigest=$(curl -s \
              --header "Accept: application/vnd.docker.distribution.manifest.v2+json" \
              --header "Authorization: Bearer ${token}" \
              "https://ghcr.io/v2/${image}/manifests/${tag}" \
              | jq -r 'first(.manifests[].digest)')
            digest=$(curl -s \
              --header "Accept: application/vnd.docker.distribution.manifest.v2+json" \
              --header "Authorization: Bearer ${token}" \
              "https://ghcr.io/v2/${image}/manifests/${multidigest}" \
              | jq -r '.config.digest')
{% else %}
            digest=$(curl -s \
              --header "Accept: application/vnd.docker.distribution.manifest.v2+json" \
              --header "Authorization: Bearer ${token}" \
              "https://ghcr.io/v2/${image}/manifests/${tag}" \
              | jq -r '.config.digest')
{% endif %}
          image_info=$(curl -sL \
            --header "Authorization: Bearer ${token}" \
            "https://ghcr.io/v2/${image}/blobs/${digest}" \
            | jq -r '.container_config')
          IMAGE_RELEASE=$(echo ${image_info} | jq -r '.Labels.build_version' | awk '{print $3}')
          IMAGE_VERSION=$(echo ${IMAGE_RELEASE} | awk -F'-ls' '{print $1}')
          if [ -z "${IMAGE_VERSION}" ]; then
            echo "**** Can't retrieve last pushed version, exiting ****"
            FAILURE_REASON="Can't retrieve last pushed version for {{ project_name }} tag {{ release_tag }}"
            curl -X POST -H "Content-Type: application/json" --data '{"avatar_url": "https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png","embeds": [{"color": 16711680,
              "description": "**Trigger Failed** \n**Reason:** '"${FAILURE_REASON}"' \n"}],
              "username": "Github Actions"}' ${{ '{{' }} secrets.DISCORD_WEBHOOK {{ '}}' }}
            exit 1
          fi
          echo "**** Last pushed version: ${IMAGE_VERSION} ****"
          if [ "${EXT_RELEASE}" == "${IMAGE_VERSION}" ]; then
            echo "**** Version ${EXT_RELEASE} already pushed, exiting ****"
            exit 0
          elif [ $(curl -s {{ lsio_ci_url }}/job/Docker-Pipeline-Builders/job/{{ project_repo_name }}/job/{{ ls_branch }}/lastBuild/api/json | jq -r '.building') == "true" ]; then
            echo "**** New version ${EXT_RELEASE} found; but there already seems to be an active build on Jenkins; exiting ****"
            exit 0
{% if external_trigger_delay_hours > 0 %}
          elif [[ $(( $(date +%s%3N) - $(curl -s {{ lsio_ci_url }}/job/Docker-Pipeline-Builders/job/{{ project_repo_name }}/job/{{ ls_branch }}/lastBuild/api/json | jq -r '.timestamp')  )) -lt $(( {{ external_trigger_delay_hours }} * 3600000 )) ]]; then
            echo "**** New version ${EXT_RELEASE} found; but the last build was less than {{ external_trigger_delay_hours }} hours ago; skipping trigger ****"
            exit 0
{% endif %}
          else
            echo "**** New version ${EXT_RELEASE} found; old version was ${IMAGE_VERSION}. Triggering new build ****"
            response=$(curl -iX POST \
              {{ lsio_ci_url }}/job/Docker-Pipeline-Builders/job/{{ project_repo_name }}/job/{{ ls_branch }}/buildWithParameters?PACKAGE_CHECK=false \
              --user ${{ '{{' }} secrets.JENKINS_USER {{ '}}' }}:${{ '{{' }} secrets.JENKINS_TOKEN {{ '}}' }} | grep -i location | sed "s|^[L|l]ocation: \(.*\)|\1|")
            echo "**** Jenkins job queue url: ${response%$'\r'} ****"
            echo "**** Sleeping 10 seconds until job starts ****"
            sleep 10
            buildurl=$(curl -s "${response%$'\r'}api/json" | jq -r '.executable.url')
            buildurl="${buildurl%$'\r'}"
            echo "**** Jenkins job build url: ${buildurl} ****"
            echo "**** Attempting to change the Jenkins job description ****"
            curl -iX POST \
              "${buildurl}submitDescription" \
              --user ${{ '{{' }} secrets.JENKINS_USER {{ '}}' }}:${{ '{{' }} secrets.JENKINS_TOKEN {{ '}}' }} \
              --data-urlencode "description=GHA external trigger https://github.com/${{ '{{' }} github.repository {{ '}}' }}/actions/runs/${{ '{{' }} github.run_id {{ '}}' }}" \
              --data-urlencode "Submit=Submit"
            echo "**** Notifying Discord ****"
            TRIGGER_REASON="A version change was detected for {{ project_name }} tag {{ release_tag }}. Old version:${IMAGE_VERSION} New version:${EXT_RELEASE}"
            curl -X POST -H "Content-Type: application/json" --data '{"avatar_url": "https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png","embeds": [{"color": 9802903,
              "description": "**Build Triggered** \n**Reason:** '"${TRIGGER_REASON}"' \n**Build URL:** '"${buildurl}display/redirect"' \n"}],
              "username": "Github Actions"}' ${{ '{{' }} secrets.DISCORD_WEBHOOK {{ '}}' }}
          fi
{% endif %}
